import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define a type for the cart item
export interface TCartItem {
  id: string;
  name: string;
  price: number;
  stock: number;
  quantity: number;
}

// Define the initial state using that type
const initialState: TCartItem[] = [];

// Create the cart slice
export const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    addToCart: (state, action: PayloadAction<TCartItem>) => {
      const item = action.payload;
      const existingItem = state.find((cartItem) => cartItem.id === item.id);

      if (existingItem) {
        // If the item already exists in the cart, increase the quantity
        existingItem.quantity = Math.min(
          existingItem.quantity + item.quantity,
          existingItem.stock
        );
      } else {
        // If the item does not exist in the cart, add it with the initial quantity
        state.push({ ...item, quantity: Math.min(item.quantity, item.stock) });
      }
    },
    increaseQuantity: (state, action: PayloadAction<{ id: string }>) => {
      const id = action.payload.id;
      const item = state.find((cartItem) => cartItem.id === id);
      if (item && item.quantity < item.stock) {
        item.quantity = item.quantity + 1;
      }
    },
    decreaseQuantity: (state, action: PayloadAction<{ id: string }>) => {
      const id = action.payload.id;
      const item = state.find((cartItem) => cartItem.id === id);
      if (item && item.quantity > 1) {
        item.quantity -= 1;
      }
    },
    removeFromCart: (state, action: PayloadAction<{ id: string }>) => {
      return state.filter((cartItem) => cartItem.id !== action.payload.id);
    },
  },
});

// Export the actions generated by createSlice
export const { addToCart, increaseQuantity, decreaseQuantity, removeFromCart } =
  cartSlice.actions;

// Export the reducer to be used in the store
export default cartSlice.reducer;
